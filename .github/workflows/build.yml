name: 🏗️ 构建跨平台应用 (嵌入式Python)

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # 允许手动触发

jobs:
  build:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: windows
            build_script: yarn build-win
            artifact_pattern: "dist/*.exe"
            artifact_name: windows-installer
            
          - os: macos-latest
            platform: macos
            build_script: yarn build-mac
            artifact_pattern: "dist/*.dmg"
            artifact_name: macos-installer
            
          - os: ubuntu-latest
            platform: linux
            build_script: yarn build-linux
            artifact_pattern: "dist/*.AppImage"
            artifact_name: linux-appimage

    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4

    - name: 🟢 设置Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'yarn'

    - name: 📦 安装Node.js依赖
      run: yarn install --frozen-lockfile

    - name: 🐍 设置嵌入式Python环境
      run: |
        echo "🐍 开始设置嵌入式Python环境..."
        yarn setup-python
        echo "✅ 嵌入式Python环境设置完成 (requirements.txt 已安装到便携 Python)"

    - name: 🔍 验证嵌入式Python环境
      shell: bash
      run: |
        echo "🔍 验证嵌入式Python安装..."
        if [ -d "node_modules/@bjia56/portable-python-3.11" ]; then
          echo "✅ portable-python包已安装"
          
          # 查找Python可执行文件
          if find node_modules/@bjia56/portable-python-3.11 -name "python*" -type f 2>/dev/null | grep -q .; then
            echo "✅ Python可执行文件已找到"
            
            # 列出Python可执行文件
            echo "📍 Python可执行文件位置:"
            find node_modules/@bjia56/portable-python-3.11 -name "python*" -type f 2>/dev/null | head -5
          else
            echo "⚠️ 未找到Python可执行文件"
          fi
        else
          echo "❌ portable-python包未找到"
          exit 1
        fi

    - name: 🔧 准备构建环境
      run: node build-setup.js

    - name: 🖼️ 修复图标配置
      run: node scripts/fix-icons.js

    - name: 🍎 生成Mac图标 (仅macOS)
      if: matrix.platform == 'macos'
      run: |
        if [ ! -f "assets/icon.icns" ]; then
          echo "正在检查PNG图标文件..."
          
          # 检查icon.png文件是否存在且有效
          if [ -f "assets/icon.png" ]; then
            # 检查文件大小（小于1KB可能是无效文件）
            file_size=$(stat -f%z "assets/icon.png" 2>/dev/null || stat -c%s "assets/icon.png" 2>/dev/null || echo "0")
            echo "图标文件大小: ${file_size} 字节"
            
            if [ "$file_size" -gt 1000 ]; then
              echo "开始生成Mac图标..."
              mkdir -p tmp.iconset
              
              # 使用错误处理生成不同尺寸的图标
              if sips -z 16 16 assets/icon.png --out tmp.iconset/icon_16x16.png 2>/dev/null && \
                 sips -z 32 32 assets/icon.png --out tmp.iconset/icon_16x16@2x.png 2>/dev/null && \
                 sips -z 32 32 assets/icon.png --out tmp.iconset/icon_32x32.png 2>/dev/null && \
                 sips -z 64 64 assets/icon.png --out tmp.iconset/icon_32x32@2x.png 2>/dev/null && \
                 sips -z 128 128 assets/icon.png --out tmp.iconset/icon_128x128.png 2>/dev/null && \
                 sips -z 256 256 assets/icon.png --out tmp.iconset/icon_128x128@2x.png 2>/dev/null && \
                 sips -z 256 256 assets/icon.png --out tmp.iconset/icon_256x256.png 2>/dev/null && \
                 sips -z 512 512 assets/icon.png --out tmp.iconset/icon_256x256@2x.png 2>/dev/null && \
                 sips -z 512 512 assets/icon.png --out tmp.iconset/icon_512x512.png 2>/dev/null && \
                 sips -z 1024 1024 assets/icon.png --out tmp.iconset/icon_512x512@2x.png 2>/dev/null; then
                
                # 生成icns文件
                if iconutil -c icns tmp.iconset -o assets/icon.icns 2>/dev/null; then
                  echo "✅ Mac图标生成成功"
                else
                  echo "⚠️ iconutil失败，将使用默认图标"
                fi
              else
                echo "⚠️ sips命令失败，PNG文件可能无效，将使用默认图标"
              fi
              
              # 清理临时文件
              rm -rf tmp.iconset
            else
              echo "⚠️ PNG图标文件太小或无效（${file_size}字节），将使用默认图标"
            fi
          else
            echo "⚠️ PNG图标文件不存在，将使用默认图标"
          fi
          
          # 如果图标生成失败，继续构建（使用默认图标）
          if [ ! -f "assets/icon.icns" ]; then
            echo "ℹ️ 将使用Electron默认图标进行构建"
          fi
        else
          echo "✅ Mac图标文件已存在"
        fi

    - name: 🪟 生成Windows图标 (仅Windows)
      if: matrix.platform == 'windows'
      run: |
        # 这里可以添加Windows图标生成逻辑
        # 暂时跳过，使用默认图标
        echo "使用默认Windows图标"

    - name: 🏗️ 构建应用 (${{ matrix.platform }})
      env:
        GH_TOKEN: ${{ secrets.BUILDACTION }}
      run: ${{ matrix.build_script }}

    - name: 📝 列出构建产物
      shell: bash
      run: |
        echo "构建产物列表："
        ls -la dist/ || echo "dist目录不存在"
        echo ""
        echo "查找构建文件："
        find dist -type f -name "*.exe" -o -name "*.dmg" -o -name "*.AppImage" 2>/dev/null || echo "未找到构建文件"

    - name: 📤 上传构建产物
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: ${{ matrix.artifact_name }}
        path: ${{ matrix.artifact_pattern }}
        retention-days: 30

  # 构建状态通知
  notify:
    needs: build
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: 📊 构建状态汇总
      run: |
        echo "🐍 嵌入式Python构建状态汇总："
        echo "Build job: ${{ needs.build.result }}"
        
        if [ "${{ needs.build.result }}" == "success" ]; then
          echo "✅ 所有平台构建成功 (包含嵌入式Python环境)"
          echo "📦 构建产物包含:"
          echo "   - Electron应用程序"
          echo "   - 嵌入式Python 3.11运行时"
          echo "   - requirements.txt 中的依赖（如 PyMuPDF、python-dotenv、requests 等）"
          echo "   - 零依赖安装，开箱即用"
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "🚀 已自动发布到GitHub Releases"
          fi
        else
          echo "❌ 构建过程中出现问题"
          echo "💡 可能的原因:"
          echo "   - 嵌入式Python下载失败"
          echo "   - 依赖安装网络问题"
          echo "   - electron-builder配置问题"
        fi
