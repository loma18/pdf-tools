name: 🏗️ 构建跨平台应用

on:
  push:
    branches: [main, master]
    tags: ["v*"]
  pull_request:
    branches: [main, master]
  workflow_dispatch: # 允许手动触发

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: windows
            build_script: yarn build-win
            artifact_pattern: "dist/*.exe"
            artifact_name: windows-installer

          - os: macos-latest
            platform: macos
            build_script: yarn build-mac
            artifact_pattern: "dist/*.dmg"
            artifact_name: macos-installer

          - os: ubuntu-latest
            platform: linux
            build_script: yarn build-linux
            artifact_pattern: "dist/*.AppImage"
            artifact_name: linux-appimage

    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 🟢 设置Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "yarn"

      - name: 🐍 设置Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: 📦 安装Node.js依赖
        run: yarn install --frozen-lockfile

      - name: 🐍 安装Python依赖
        run: |
          cd python-backend
          pip install -r requirements.txt
          cd ..

          - name: 🔧 准备构建环境
      run: node build-setup.js

    - name: 🖼️ 修复图标配置
      run: node scripts/fix-icons.js

          - name: 🍎 生成Mac图标 (仅macOS)
      if: matrix.platform == 'macos'
      run: |
        if [ ! -f "assets/icon.icns" ]; then
          echo "正在检查PNG图标文件..."
          
          # 检查icon.png文件是否存在且有效
          if [ -f "assets/icon.png" ]; then
            # 检查文件大小（小于1KB可能是无效文件）
            file_size=$(stat -f%z "assets/icon.png" 2>/dev/null || stat -c%s "assets/icon.png" 2>/dev/null || echo "0")
            echo "图标文件大小: ${file_size} 字节"
            
            if [ "$file_size" -gt 1000 ]; then
              echo "开始生成Mac图标..."
              mkdir -p tmp.iconset
              
              # 使用错误处理生成不同尺寸的图标
              if sips -z 16 16 assets/icon.png --out tmp.iconset/icon_16x16.png 2>/dev/null && \
                 sips -z 32 32 assets/icon.png --out tmp.iconset/icon_16x16@2x.png 2>/dev/null && \
                 sips -z 32 32 assets/icon.png --out tmp.iconset/icon_32x32.png 2>/dev/null && \
                 sips -z 64 64 assets/icon.png --out tmp.iconset/icon_32x32@2x.png 2>/dev/null && \
                 sips -z 128 128 assets/icon.png --out tmp.iconset/icon_128x128.png 2>/dev/null && \
                 sips -z 256 256 assets/icon.png --out tmp.iconset/icon_128x128@2x.png 2>/dev/null && \
                 sips -z 256 256 assets/icon.png --out tmp.iconset/icon_256x256.png 2>/dev/null && \
                 sips -z 512 512 assets/icon.png --out tmp.iconset/icon_256x256@2x.png 2>/dev/null && \
                 sips -z 512 512 assets/icon.png --out tmp.iconset/icon_512x512.png 2>/dev/null && \
                 sips -z 1024 1024 assets/icon.png --out tmp.iconset/icon_512x512@2x.png 2>/dev/null; then
                
                # 生成icns文件
                if iconutil -c icns tmp.iconset -o assets/icon.icns 2>/dev/null; then
                  echo "✅ Mac图标生成成功"
                else
                  echo "⚠️ iconutil失败，将使用默认图标"
                fi
              else
                echo "⚠️ sips命令失败，PNG文件可能无效，将使用默认图标"
              fi
              
              # 清理临时文件
              rm -rf tmp.iconset
            else
              echo "⚠️ PNG图标文件太小或无效（${file_size}字节），将使用默认图标"
            fi
          else
            echo "⚠️ PNG图标文件不存在，将使用默认图标"
          fi
          
          # 如果图标生成失败，继续构建（使用默认图标）
          if [ ! -f "assets/icon.icns" ]; then
            echo "ℹ️ 将使用Electron默认图标进行构建"
          fi
        else
          echo "✅ Mac图标文件已存在"
        fi

      - name: 🪟 生成Windows图标 (仅Windows)
        if: matrix.platform == 'windows'
        run: |
          # 这里可以添加Windows图标生成逻辑
          # 暂时跳过，使用默认图标
          echo "使用默认Windows图标"

      - name: 🏗️ 构建应用 (${{ matrix.platform }})
        run: ${{ matrix.build_script }}

      - name: 📝 列出构建产物
        shell: bash
        run: |
          echo "构建产物列表："
          ls -la dist/ || echo "dist目录不存在"
          echo ""
          echo "查找构建文件："
          find dist -type f -name "*.exe" -o -name "*.dmg" -o -name "*.AppImage" 2>/dev/null || echo "未找到构建文件"

      - name: 📤 上传构建产物
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.artifact_pattern }}
          retention-days: 30

  # 创建Release（仅在打tag时）
  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: 📥 下载所有构建产物
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
          merge-multiple: true

      - name: 📝 列出下载的文件
        run: |
          echo "下载的构建产物："
          find artifacts -type f -exec ls -la {} \;

      - name: 🚀 创建Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/*
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 构建状态通知
  notify:
    needs: [build, release]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: 📊 构建状态汇总
        run: |
          echo "构建状态汇总："
          echo "Build job: ${{ needs.build.result }}"
          echo "Release job: ${{ needs.release.result }}"

          if [ "${{ needs.build.result }}" == "success" ]; then
            echo "✅ 所有平台构建成功"
          else
            echo "❌ 构建过程中出现问题"
          fi
